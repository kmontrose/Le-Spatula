// h file for playing audio and reading accelerometer

#include <PCM.h>

#include <Wire.h>
#include <Adafruit_MMA8451.h>
#include <Adafruit_Sensor.h>

Adafruit_MMA8451 mma = Adafruit_MMA8451();


int maxtime = 6000; //starts at 1 min max timer

int count = 0; // score variable

//int16_t raw_x, raw_y, raw_z; // variables for accelerometer raw data

  



//press it function  (returns 1 for success and 0 for failure)

int pressIt(){

//test code///////////////////////
 digitalWrite(4, HIGH);

                 delay(100);

                 digitalWrite(4, LOW);
///////////////////////////

       int success = 1;

       

       

       //Begin countdown
       unsigned long tstart = millis();

      

       //calculate how much time has passed

       //unsigned long tend = millis();

      // unsigned long time = tend - tstart;

  
  unsigned long time = 0;
  unsigned long tend = 0;

       while(time < maxtime){  //wait for fsr value to change until time is up

      

      //calculate how much time has passed
       tend = millis();

       time = tend - tstart;



               int fsrReading = 0;

               while(fsrReading == 0 && time<maxtime){ //read fsr pin until press is detected
                //calculate how much time has passed
              tend = millis();

              time = tend - tstart;
              fsrReading = digitalRead(8);

                              }

              

               //recalculate how much time has passed

               tend = millis();

        time = tend - tstart;

              

               if(fsrReading == 1 && time < maxtime){  //if flex sensor reads good flex and timer is not up: success

          //Turn green LED on

          digitalWrite(2, HIGH);

                 delay(100);

                 digitalWrite(2, LOW);

           delay(500);
          return success;

       }

       else if(time >= maxtime){ //failure

          digitalWrite(4, HIGH);

                 delay(100);

                 digitalWrite(4, LOW);

                 success = 0;

           delay(500);
          return success;

       }

     } 

}

 

//flip it function (returns 1 for success and 0 for failure)

int flipIt(){

uint8_t startpos = mma.getOrientation();

  //test code/////////////////
  digitalWrite(2, HIGH);

                 delay(100);

                 digitalWrite(2, LOW);

                 delay(500);
  /////////////////////////////

    int success = 1;

    

   

    //Begin countdown

    unsigned long tstart = millis();

    unsigned long tend = millis();

    unsigned long time = tend - tstart;





    while(time < maxtime){

        //read accelerometer to detect jerking motion

       //int raw_x = mma.x;
       //int raw_y = mma.x;
       //int raw_z = mma.z;


        //int avg = (abs(raw_x) + abs(raw_y) + abs(raw_z))/3;

        uint8_t pos = mma.getOrientation();

        //recalculate how much time has passed

        tend = millis();

        time = tend - tstart;

   

        if(pos != startpos){ //if accelerometer detects a succesful jerk and time is not up: success

            digitalWrite(2, HIGH); // green led high

                   delay(100);

                   digitalWrite(2, LOW); // green led off

             delay(500);
            return success;

        }

        else if(time >= maxtime){ //failure

            digitalWrite(4, HIGH); // red led on

                   delay(100);

                   digitalWrite(4, LOW); // red led off

            success = 0;

             delay(500);
            return success;

        } 

 }

}

 

//firmly grasp it function (returns 1 for success and 0 for failure)

int firmlyGraspIt(){


//test/////////////////////////////////////////////
  digitalWrite(2, HIGH);
  digitalWrite(4, HIGH);

                 delay(100);

                 digitalWrite(2, LOW);
                 digitalWrite(4, LOW);
  //////////////////////////////////////////////////

    int success = 1;


 

    //Begin countdown

    unsigned long tstart = millis();

 

    unsigned long tend = millis();

    unsigned long time = tend - tstart;

 

    while(time < maxtime){

        //read state of button

        int buttonState;

        buttonState = digitalRead(7);

       

               //recalculate how much time has passed

        tend = millis();

        time = tend - tstart;

       

        if(buttonState == HIGH && time < maxtime){ //if handle is firmly grasped and time is not up: success

            digitalWrite(2, HIGH); // green led on

                   delay(100);

                   digitalWrite(2, LOW); // green led off

             delay(500);
            return success;

        }
    }


        if(time >= maxtime){ //failure

            digitalWrite(4, HIGH); // red led on

                   delay(100);

                   digitalWrite(4, LOW); // red led off

            success = 0;


             delay(500);
            return success;
        }

    

}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


void setup(){





  

  //Serial.begin(9600);

 

  //set pins

  pinMode(2, OUTPUT); // green led

  pinMode(4, OUTPUT); // red led

  pinMode(8, INPUT); // FSR

  pinMode(7, INPUT); // firmly grasp it button

  pinMode(13, INPUT); // start button

  pinMode(12, OUTPUT); //sound for press it
  pinMode(5, OUTPUT);  //sound for flip it
  pinMode(6, OUTPUT); //sound for grasp it
 
 digitalWrite(12, HIGH);  //keep audio pins high as default
 digitalWrite(5, HIGH);
 digitalWrite(6, HIGH);

 
//test/////////////////////////////////////////////
  digitalWrite(2, HIGH);
  digitalWrite(4, HIGH);

                 delay(500);

                 digitalWrite(2, LOW);
                 digitalWrite(4, LOW);

                 delay(100);
  //////////////////////////////////////////////////
  //test/////////////////////////////////////////////
  digitalWrite(2, HIGH);
  digitalWrite(4, HIGH);

                 delay(500);

                 digitalWrite(2, LOW);
                 digitalWrite(4, LOW);

                 delay(690);
  //////////////////////////////////////////////////




//mma.setRange(MMA8451_RANGE_2_G);  //for accelerometer  

 

  if (! mma.begin()) {
    digitalWrite(4, HIGH);
    while(1);
     digitalWrite(4, LOW);

  }

  //test/////////////////////////////////////////////
  digitalWrite(2, HIGH);

                 delay(500);

                 digitalWrite(2, LOW);

                 delay(1000);
  //////////////////////////////////////////////////


}

 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void loop() {

//wait for game to turn on

//start the game
//read state of START button and wait until game start is detected
int startButton = 0;
while (startButton == 0){
  startButton = digitalRead(13);
}


//begin the game once the on button is pressed

    int mistake = 0; //create a way for loop to end if a mistake is made
 
    int check = 0;
    while(mistake == 0){

          //Randomize the teask
        int task = random(1, 4);
        //int task = 2; ///delete me
        //if (task==2) task = 3;

      

       //Press it
       if(task==1){     

         //play audio clip saying press it
      digitalWrite(12, LOW);
      delay(200);
      digitalWrite(12, HIGH);       
      delay(500);

          //call press it function
          check = pressIt();

         

          if(check == 1){

              count++;

                    

                     //check if max score is reached

                     if(count == 99){

                              mistake = 1;

                     }

          }

          else if(check == 0){

              mistake = 1;

          }

       }

      

       //Flip it

       else if (task==2){

            //play audio clip saying flip it
       digitalWrite(5, LOW);
    delay(200);
    digitalWrite(5, HIGH);
    delay(500);

           //call flip it function
           check = flipIt();

         

          if(check == 1){

              count++;

                     //check if max score is reached

                     if(count == 99){

                              mistake = 1;

                     }

          }

          else if(check == 0){

              mistake = 1;

          }

       }

      

       //Firmly grasp it

       else if (task==3){

         //play audio clip saying grasp it
       digitalWrite(6, LOW);
       delay(200);
        digitalWrite(6, HIGH);
        delay(500);

          //call firmly grasp it function

           check = firmlyGraspIt();

         

          if(check == 1){

              count++;

                     //check if max score is reached

                     if(count == 99){

                              mistake = 1;

                     }

          }

          else if(check == 0){

              mistake = 1;

          }

       }

      

       //decrement time to perform tasks

       maxtime = maxtime - 100;

    }

 

  //if this point is reached, either by failure or by maxing out score to 99

 

  if(count == 99){

               //play audio clip of spongebob with a congratulatory reading of the 99 score count

       //startPlayback(pianotest, sizeof(pianotest));

  }

  else if(count < 99){

               //play audio clip saying the score reached based on what count variable currently is

               //startPlayback(pianotest, sizeof(pianotest));

  }

}
